name: Build wheels
on:
  release:
    types: [ published ]
  workflow_dispatch:
  pull_request:
    branches:
      - "main"

env:
  CIBW_BUILD_VERBOSITY: 2
  CIBW_BUILD_FRONTEND: "pip; args: --no-build-isolation"
  # Skip PyPy and MUSL builds in any and all jobs
  CIBW_SKIP: "pp* *musllinux*"
  FORCE_COLOR: 3

jobs:
  build_windows_wheels:
    name: Wheels (windows-latest)
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'true'
      - uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Get number of cores on Windows
        id: get_num_cores
        shell: python
        run: |
          from os import environ, cpu_count
          num_cpus = cpu_count()
          output_file = environ['GITHUB_OUTPUT']
          with open(output_file, "a", encoding="utf-8") as output_stream:
              output_stream.write(f"count={num_cpus}\n")

      - name: Build wheels on Windows
        run: pipx run cibuildwheel --output-dir wheelhouse
        env:
          CIBW_ENVIRONMENT: >
            PYBAMMSOLVERS_USE_VCPKG=ON
            VCPKG_ROOT_DIR=C:\vcpkg
            VCPKG_DEFAULT_TRIPLET=x64-windows-static-md
            VCPKG_FEATURE_FLAGS=manifests,registries
            CMAKE_GENERATOR="Visual Studio 17 2022"
            CMAKE_GENERATOR_PLATFORM=x64
            CMAKE_BUILD_PARALLEL_LEVEL=${{ steps.get_num_cores.outputs.count }}
          CIBW_ARCHS: AMD64
          CIBW_BEFORE_BUILD: python -m pip install setuptools delvewheel # skip CasADi and CMake
          CIBW_REPAIR_WHEEL_COMMAND: delvewheel repair --add-path C:/Windows/System32 -w {dest_dir} {wheel}
          CIBW_TEST_EXTRAS: "dev"
          CIBW_TEST_COMMAND: |
            python -m pytest {project}/tests
      - name: Upload Windows wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels_windows
          path: ./wheelhouse/*.whl
          if-no-files-found: error

  build_manylinux_wheels:
    name: Wheels (linux-amd64)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'true'

      - uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Build wheels on Linux
        run: pipx run cibuildwheel --output-dir wheelhouse
        env:
          CIBW_ARCHS_LINUX: x86_64
          CIBW_BEFORE_ALL_LINUX: >
            yum -y install openblas-devel lapack-devel &&
            bash install_sundials.sh
          CIBW_BEFORE_BUILD_LINUX: python -m pip install cmake casadi setuptools wheel
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: auditwheel repair -w {dest_dir} {wheel}
          CIBW_TEST_EXTRAS: "dev"
          CIBW_TEST_COMMAND: |
            set -e -x
            python -m pytest {project}/tests

      - name: Upload wheels for Linux
        uses: actions/upload-artifact@v4
        with:
          name: wheels_manylinux
          path: ./wheelhouse/*.whl
          if-no-files-found: error

  build_macos_wheels:
    name: Wheels (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-13, macos-14]
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'true'
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel

      - name: Build wheels on macOS
        shell: bash
        run: |
            brew analytics off
            brew install libomp
            brew reinstall gcc
            python install_KLU_Sundials.py
            python -m cibuildwheel --output-dir wheelhouse
        env:
          # 10.13 for Intel (macos-13), 11.0 for Apple Silicon (macos-14 and macos-latest)
          #MACOSX_DEPLOYMENT_TARGET: ${{ matrix.os == 'macos-14' && '11.0' || '10.13' }}
          CIBW_ARCHS_MACOS: auto
          CIBW_BEFORE_BUILD: python -m pip install cmake casadi setuptools delocate
          CIBW_REPAIR_WHEEL_COMMAND: |
            delocate-listdeps {wheel} && delocate-wheel -v -w {dest_dir} {wheel}
          CIBW_TEST_EXTRAS: "dev"
          CIBW_TEST_COMMAND: |
            set -e -x
            python -m pytest {project}/tests

      - name: Upload wheels for macOS (amd64, arm64)
        uses: actions/upload-artifact@v4
        with:
          name: wheels_${{ matrix.os }}
          path: ./wheelhouse/*.whl
          if-no-files-found: error

  build_sdist:
    name: Build SDist
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.12

      - name: Build SDist
        run: pipx run build --sdist

      - name: Upload SDist
        uses: actions/upload-artifact@v4.4.0
        with:
          name: sdist
          path: ./dist/*.tar.gz
          if-no-files-found: error

  publish_pypi:
    if: ${{ github.event_name == 'release' && github.repository == 'pybamm-team/pybammsolvers' }}
    name: Upload package to PyPI
    needs: [
      build_manylinux_wheels,
      build_macos_wheels,
      build_windows_wheels,
      build_sdist
    ]
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/pybammsolvers
    permissions:
      id-token: write

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true

      - name: Sanity check downloaded artifacts
        run: ls -lA artifacts/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: artifacts/
